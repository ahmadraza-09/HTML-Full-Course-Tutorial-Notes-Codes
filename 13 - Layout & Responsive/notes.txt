游리 What is HTML Layout Elements and Techniques ?

    Websites often display content in multiple columns (like a magazine or a newspaper).

游리 HTML Layout Elements

    HTML has several semantic elements that define the different parts of a web page:
    
    For example:

        <header> - Defines a header for a document or a section
        <nav> - Defines a set of navigation links
        <section> - Defines a section in a document
        <article> - Defines an independent, self-contained content
        <aside> - Defines content aside from the content (like a sidebar)
        <footer> - Defines a footer for a document or a section
        <details> - Defines additional details that the user can open and close on demand
        <summary> - Defines a heading for the <details> element

游리 HTML Layout Techniques

    There are four different techniques to create multicolumn layouts. 
    Each technique has its pros and cons:

    For example:

        CSS framework
        CSS float property
        CSS flexbox
        CSS grid

游리 CSS Frameworks

    If you want to create your layout fast, you can use a CSS framework, like Bootstrap.

游리 CSS Float Layout

    It is common to do entire web layouts using the CSS float property. 
    Float is easy to learn - you just need to remember how the float and 
    clear properties work. Disadvantages: Floating elements are tied to 
    the document flow, which may harm the flexibility. Learn more about 
    float in our CSS Float and Clear chapter.

游리 CSS Flexbox Layout

    Use of flexbox ensures that elements behave predictably when the page 
    layout must accommodate different screen sizes and different display 
    devices.

游리 CSS Grid Layout

    The CSS Grid Layout Module offers a grid-based layout system, with rows 
    and columns, making it easier to design web pages without having to use 
    floats and positioning.

游리 What is HTML Responsive Web Design

    游댖Responsive web design is about creating web pages that look good on all devices!
    游댖A responsive web design will automatically adjust for different 
    screen sizes and viewports.
    游댖Responsive Web Design is about using HTML and CSS to automatically 
    resize, hide, shrink, or enlarge, a website, to make it look good on 
    all devices (desktops, tablets, and phones):

游리 Setting The Viewport

    To create a responsive website, add the following <meta> tag to all your web pages:
    
    For example:

        <meta name="viewport" content="width=device-width, initial-scale=1.0">

游리 Responsive Images

    Responsive images are images that scale nicely to fit any browser size.

    Using the width Property
    If the CSS width property is set to 100%, the image will be responsive and scale up and down:

        For example:

            <img src="img_girl.jpg" style="width:100%;">

游리 Using the max-width Property

    If the max-width property is set to 100%, the image will scale down if 
    it has to, but never scale up to be larger than its original size:

        For example:

            <img src="img_girl.jpg" style="max-width:100%;height:auto;">

游리 Responsive Text Size

    游댖The text size can be set with a "vw" unit, which means the "viewport width".
    游댖That way the text size will follow the size of the browser window:

        For example:    

            <h1 style="font-size:10vw">Hello World</h1>

        游댮 Note - Viewport is the browser window size. 1vw = 1% of 
        viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.

游리 Media Queries

    In addition to resize text and images, it is also common to use media queries in responsive web pages.
    With media queries you can define completely different styles for different browser sizes.
    Example: resize the browser window to see that the three div elements below will display horizontally on large screens and stack vertically on small screens:

        Syntax:


        <style>
        * {
        box-sizing: border-box;
        }

        .left {
        background-color: #2196F3;
        padding: 20px;
        float: left;
        width: 20%; /* The width is 20%, by default */
        }

        .main {
        background-color: #f1f1f1;
        padding: 20px;
        float: left;
        width: 60%; /* The width is 60%, by default */
        }

        .right {
        background-color: #04AA6D;
        padding: 20px;
        float: left;
        width: 20%; /* The width is 20%, by default */
        }

        /* Use a media query to add a break point at 800px: */
        @media screen and (max-width: 800px) {
        .left, .main, .right {
            width: 100%; /* The width is 100%, when the viewport is 800px or smaller */
        }
        }
        </style>
        </head>
        <body>

        <h2>Media Queries</h2>
        <p>Resize the browser window.</p>

        <p>Make sure you reach the breakpoint at 800px when resizing this frame.</p>

        <div class="left">
        <p>Left Menu</p>
        </div>

        <div class="main">
        <p>Main Content</p>
        </div>

        <div class="right">
        <p>Right Content</p>
        </div>

游리 Responsive Web Design - Frameworks

    All popular CSS Frameworks offer responsive design.

游리 Bootstrap

    Bootstrap is the most popular CSS Framework for developing responsive 
    and mobile-first websites.